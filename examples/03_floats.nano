# Float Operations
# This example demonstrates working with floating-point numbers

fn add_floats(a: float, b: float) -> float {
    return (+ a b)
}

shadow add_floats {
    assert (== (add_floats 1.5 2.5) 4.0)
    assert (== (add_floats 0.0 0.0) 0.0)
    assert (== (add_floats 3.14 1.86) 5.0)
}

fn multiply_floats(a: float, b: float) -> float {
    return (* a b)
}

shadow multiply_floats {
    assert (== (multiply_floats 2.0 3.0) 6.0)
    assert (== (multiply_floats 1.5 2.0) 3.0)
    assert (== (multiply_floats 0.5 10.0) 5.0)
}

fn divide_floats(a: float, b: float) -> float {
    return (/ a b)
}

shadow divide_floats {
    assert (== (divide_floats 10.0 2.0) 5.0)
    assert (== (divide_floats 7.5 2.5) 3.0)
    assert (== (divide_floats 1.0 4.0) 0.25)
}

fn circle_area(radius: float) -> float {
    let pi: float = 3.14159
    return (* pi (* radius radius))
}

shadow circle_area {
    assert (== (circle_area 1.0) 3.14159)
    assert (== (circle_area 2.0) 12.56636)
}

fn main() -> int {
    print (add_floats 3.14 2.86)
    print (multiply_floats 2.5 4.0)
    print (divide_floats 15.0 3.0)
    print (circle_area 5.0)
    return 0
}

shadow main {
    assert (== (main) 0)
}