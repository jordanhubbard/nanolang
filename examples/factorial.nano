# Factorial calculator with comprehensive shadow-tests

fn factorial(n: int) -> int {
    if (<= n 1) {
        return 1
    } else {
        return (* n (factorial (- n 1)))
    }
}

shadow factorial {
    # Test base cases
    assert (== (factorial 0) 1)
    assert (== (factorial 1) 1)
    
    # Test small values
    assert (== (factorial 2) 2)
    assert (== (factorial 3) 6)
    assert (== (factorial 4) 24)
    assert (== (factorial 5) 120)
    
    # Test larger value
    assert (== (factorial 10) 3628800)
}

fn main() -> int {
    print "Factorials from 0 to 10:"
    
    let mut i: int = 0
    while (<= i 10) {
        print "factorial("
        print i
        print ") = "
        print (factorial i)
        set i (+ i 1)
    }
    
    return 0
}

shadow main {
    assert (== (main) 0)
}
