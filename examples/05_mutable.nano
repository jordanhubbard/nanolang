// Mutable vs Immutable Variables
// This example demonstrates the difference between let and let mut

fn immutable_example() -> int {
    let x: int = 10
    let y: int = 20
    let sum: int = (+ x y)
    return sum
}

shadow immutable_example {
    assert (== (immutable_example) 30)
}

fn mutable_counter() -> int {
    let mut count: int = 0
    set count (+ count 1)
    set count (+ count 1)
    set count (+ count 1)
    return count
}

shadow mutable_counter {
    assert (== (mutable_counter) 3)
}

fn accumulator(n: int) -> int {
    let mut acc: int = 0
    let mut i: int = 0
    while (< i n) {
        set acc (+ acc i)
        set i (+ i 1)
    }
    return acc
}

shadow accumulator {
    assert (== (accumulator 5) 10)
    assert (== (accumulator 10) 45)
    assert (== (accumulator 0) 0)
}

fn swap_values(a: int, b: int) -> int {
    let mut x: int = a
    let mut y: int = b
    let temp: int = x
    set x y
    set y temp
    return x
}

shadow swap_values {
    assert (== (swap_values 5 10) 10)
    assert (== (swap_values 100 200) 200)
}

fn double_value(n: int) -> int {
    let mut result: int = n
    set result (* result 2)
    return result
}

shadow double_value {
    assert (== (double_value 5) 10)
    assert (== (double_value 0) 0)
    assert (== (double_value 100) 200)
}

fn main() -> int {
    print (immutable_example)
    print (mutable_counter)
    print (accumulator 7)
    print (swap_values 15 25)
    print (double_value 42)
    return 0
}

shadow main {
    assert (== (main) 0)
}